name: Checks
on: [push, pull_request]

jobs:
  test:
    strategy:
      matrix:
        ckan-version: ["2.11"]
        dcor_control: ["develop", "pypi"]
      fail-fast: false

    name: DCOR-CKAN ${{ matrix.ckan-version }} ${{ matrix.dcor_control }}
    runs-on: ubuntu-latest
    container:
      image: ckan/ckan-dev:${{ matrix.ckan-version }}
      options: --user root --hostname dcor-dev-docker

    services:
      solr:
        image: ckan/ckan-solr:${{ matrix.ckan-version }}-solr9
      postgres:
        image: ckan/ckan-postgres-dev:${{ matrix.ckan-version }}
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: postgres
        options: --health-cmd "pg_isready" --health-interval 10s --health-timeout 5s --health-retries 10
      redis:
        image: redis:3
      minio:
        image: minio/minio:latest
        env:
          MINIO_ROOT_USER: minioadmin
          MINIO_ROOT_PASSWORD: minioadmin
        options: >-
          --entrypoint "minio"
          --health-cmd "curl -f http://localhost:9000/minio/health/ready || exit 1"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 10
          server --console-address :9001 /data
        ports:
          - 9000:9000
          - 9001:9001

    env:
      CKAN_SQLALCHEMY_URL: postgresql://ckan_default:pass@postgres/ckan_test
      CKAN_DATASTORE_WRITE_URL: postgresql://datastore_write:pass@postgres/datastore_test
      CKAN_DATASTORE_READ_URL: postgresql://datastore_read:pass@postgres/datastore_test
      CKAN_SOLR_URL: http://solr:8983/solr/ckan
      CKAN_REDIS_URL: redis://redis:6379/1
      MINIO_ROOT_USER: minioadmin
      MINIO_ROOT_PASSWORD: minioadmin
      MINIO_NEW_USER: dcor
      MINIO_NEW_USER_KEY: secretkey12345678


    steps:
      - uses: actions/checkout@v4

      - name: Configure MinIO (user, bucket, policy)
        run: |
          curl -sO https://dl.min.io/client/mc/release/linux-amd64/mc
          chmod +x mc && mv mc /usr/local/bin/mc

          mc alias set local http://minio:9000 "${MINIO_ROOT_USER}" "${MINIO_ROOT_PASSWORD}"
          mc admin user add local  "${MINIO_NEW_USER}" "${MINIO_NEW_SECRET_KEY}" || echo "User already exists"
          mc admin policy attach local readwrite --user="${MINIO_NEW_USER}" || echo "Policy already attached"
          mc mb local/ckan || echo "Bucket already exists"
          mc policy set download local/ckan/storage || echo "Policy already set"

      - name: Install and setup DCOR
        run: |
          # pip3 install dcor_control
          pip3 install git+https://github.com/DCOR-dev/dcor_control
          # use test-core.ini as default
          cp /srv/app/src/ckan/test-core.ini /srv/app/ckan.ini
          # initialize CKAN database
          ckan -c /srv/app/ckan.ini db init
          # fix location of allowed datastore commands
          # https://github.com/ckan/ckan/issues/8926
          mkdir -p /srv/app/ckanext/datastore/tests/
          wget -O /srv/app/ckanext/datastore/tests/allowed_functions.txt https://raw.githubusercontent.com/ckan/ckan/refs/heads/master/ckanext/datastore/allowed_functions.txt
          # complement configuration
          dcor inspect --assume-yes

      - name: Install latest DCOR extensions from GitHub
        if: matrix.dcor_control == 'develop'
        run: |
          dcor develop --yes
          dcor inspect --assume-yes

      - name: Install current extension and its testing requirements
        run: |
          pip install -e .
          pip install -r ./ckanext/dc_view/tests/requirements.txt

      - name: Wait for MinIO to be ready
        run: |
          until wget -q http://minio:9000/minio/health/ready; do sleep 2; done

      - name: Run tests
        run: |
          pytest -v --ckan-ini=/srv/app/ckan.ini \
             --cov=ckanext.dc_view \
             --cov-report=xml \
             --cov-append \
             --disable-warnings \
             ckanext/dc_view/tests/
